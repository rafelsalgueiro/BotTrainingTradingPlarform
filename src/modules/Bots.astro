---
import LoadBots from '../components/LoadBots.astro';
import DropDownTimeWindow from '../components/DropDownTimeWindow.astro';
import TimeSpanMultiplier from '../components/TimeSpanMultiplier.astro';
import AggregateTimeWindowIni from '../components/AggregateTimeWindowIni.astro';
import AggregateTimeWindowEnd from '../components/AggregateTimeWindowEnd.astro';
import CurrencyPair from '../components/CurrencyPair.astro';
import Leverage from '../components/Leverage.astro';
import Deposit from '../components/Deposit.astro';
---    

    <div class="px-4 pt-6 items-center justify-between mb-4">
            <h1 class="flex justify-center text-4xl text-gray-900 dark:text-gray-100 font-bold mb-8">Add new bot</h1>
                <CurrencyPair/>
            <div class="flex flex-row justify-center gap-x-10 mb-7">
                <Leverage/>
                <Deposit/>
            </div>
            <div class="flex flex-row justify-center gap-x-10 mb-7">
                <DropDownTimeWindow/>
                <TimeSpanMultiplier/>
                <AggregateTimeWindowIni/>
                <AggregateTimeWindowEnd/>        
            </div>
            <LoadBots />
    </div>


    <script>
    import { onMount } from 'solid-js';
    import io from 'socket.io-client';
    import axios from 'axios';
    const sendButton = document.getElementById('sendButton');

    sendButton?.addEventListener('click', function() {
        try {
        var leverageSelected = document.getElementById('leverage');
        var deposit = document.getElementById('deposit').value;
        var fileOfBot = document.getElementById('fileOfBot').files;
        var timespanMultiplier = document.getElementById('timespanMultiplier').value;
        var initDate = document.getElementById('initDate').value;
        var endDate = document.getElementById('endDate').value;
        var dropdownButtonTimeWindow = document.getElementById('dropdownButtonTimeWindow');
        var currencySelected = document.getElementById('currencySelected');
        var period;
        var hasError = false;

        String(currencySelected?.textContent) === "Select currency pair" ? (alert("Please select a currency pair"), hasError = true) : null;
        String(dropdownButtonTimeWindow?.textContent) === "Time window" ? (alert("Please select a time window"), hasError = true) : null;
        initDate === "" ? (alert("Please select a start date"), hasError = true) : null;
        endDate === "" ? (alert("Please select an end date"), hasError = true) : null;

        let initDateCheck = initDate.split('/');
        initDateCheck = `${initDateCheck[2]}${initDateCheck[0]}${initDateCheck[1]}`;
        let endDateCheck = endDate.split('/');
        endDateCheck = `${endDateCheck[2]}${endDateCheck[0]}${endDateCheck[1]}`;

        const isInvalidDateRange = parseInt(endDateCheck) < parseInt(initDateCheck);
        isInvalidDateRange ? (alert("The end date must be greater than the start date"), hasError = true) : null;
        fileOfBot === "" ? (alert("Please upload your bot"), hasError = true) : null;
        deposit === "" ? (alert("Please enter a deposit"), hasError = true ): null;
        String(leverageSelected?.textContent) === "SelectLeverage" ? (alert("Please enter a deposit"), hasError = true) : null;

        if (timespanMultiplier === "") {
            alert("Please select a timespan multiplier");
            hasError = true;
        } else {
            var timespan = parseInt(timespanMultiplier || '0');
            if (timespan < 0) {
                alert("Please select a positive timespan multiplier");
                hasError = true;
            }
            
            switch (String(dropdownButtonTimeWindow?.textContent)) {
                case "minute":
                    (timespan === 1 || timespan === 5 || timespan === 15 || timespan === 30 ) ? null : (alert("In minute time window, timespan only can be 1, 5, 15 "), hasError = true);
                    period = 'M';
                    break;
                case "hour":
                    (timespan === 1 || timespan === 4 ) ? null : (alert("In hourly time window, timespan only can be 1 or 4"),  hasError = true);
                    period = 'H';
                    break;
                case "day":
                    (timespan != 1) ? (alert("In daily time window, timespan only can be 1"), hasError = true) : null;
                    period = 'D';
                    break;
                case "week":
                    (timespan != 1) ? (alert("In weekly time window, timespan only can be 1"), hasError = true) : null;
                    period = 'W';
                    break;
            }
        }
        }
        catch ({error}) {
            console.log(error);
        }
        var period = period + timespanMultiplier;
        
        let initDateParts = initDate.split('/');
        initDate = `${initDateParts[2]}.${initDateParts[0]}.${initDateParts[1]}`;

        let endDateParts = endDate.split('/');
        endDate = `${endDateParts[2]}.${endDateParts[0]}.${endDateParts[1]}`;

        let ex5Files = [];
        let mqhFiles = [];
            
        for (let i = 0; i < fileOfBot.length; i++) {
            if (fileOfBot[i].name.endsWith('.ex5')) {
                ex5Files.push(fileOfBot[i]);
            } else if (fileOfBot[i].name.endsWith('.mqh')) {
                mqhFiles.push(fileOfBot[i]);
            }
        }
        let formData = new FormData();
        
        for (let i = 0; i < ex5Files.length; i++) {
            formData.append('ex5_files', ex5Files[i]);
        }
        
        for (let i = 0; i < mqhFiles.length; i++) {
            formData.append('mqh_files', mqhFiles[i]);
        }

        function uploadFiles() {
            return axios.post('http://127.0.0.1:5000/files', formData, {
            headers: {
            'Content-Type': 'multipart/form-data'
            }
            });
        }

        var parameters = {
            filename: ex5Files[0].name,
            symbol: currencySelected?.textContent,
            period: period,
            from_date: initDate,
            to_date: endDate,
            deposit: deposit,
            leverage: leverageSelected?.textContent
        };

    
        function uploadParameters() {
            return axios.post('http://127.0.0.1:5000/parameters', parameters, {
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        }

        uploadFiles()
            .then(response => {
                console.log('Files uploaded successfully:', response.data);
                return uploadParameters();
            })
            .then(response => {
                console.log('Parameters uploaded successfully:', response.data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });

    onMount(() => {
        const socket = io('http://127.0.0.1:5000/');

        socket.on('connect', () => {
            console.log('WebSocket connection established.');
        });
        
        socket.on('results', data => {
            console.log('Results:', data);
            
            setTimeout(() => {
                window.location.href = '/dashboard';
            }, 800);
        });
        
    });
    </script>